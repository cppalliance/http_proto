#
# Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Official repository: https://github.com/CPPAlliance/http_proto
#

import testing ;
import ac ;

using zlib ;

project
    : requirements
      $(c11-requires)
      <library>/boost/http_proto//boost_http_proto
      [ ac.check-library /boost/http_proto//boost_http_proto_zlib : <library>/boost/http_proto//boost_http_proto_zlib : ]
      <source>../../../url/extra/test_main.cpp
      <source>./test_helpers.cpp
      <include>.
      <include>../../../url/extra
      <warnings>extra
      <warnings-as-errors>on
      <target-os>darwin,<undefined-sanitizer>norecover:<link>static
    ;

local SOURCES =
    buffered_base.cpp
    context.cpp
    error.cpp
    field.cpp
    fields.cpp
    fields_base.cpp
    fields_view.cpp
    fields_view_base.cpp
    file.cpp
    file_base.cpp
    file_body.cpp
    filter.cpp
    header_limits.cpp
    http_proto.cpp
    message_base.cpp
    message_view_base.cpp
    metadata.cpp
    method.cpp
    parser.cpp
    request.cpp
    request_parser.cpp
    request_view.cpp
    response.cpp
    response_parser.cpp
    response_view.cpp
    sandbox.cpp
    serializer.cpp
    sink.cpp
    source.cpp
    status.cpp
    string_body.cpp
    test_helpers.cpp
    version.cpp
    rfc/combine_field_values.cpp
    rfc/list_rule.cpp
    rfc/parameter.cpp
    rfc/quoted_token_rule.cpp
    rfc/quoted_token_view.cpp
    rfc/token_rule.cpp
    rfc/transfer_encoding_rule.cpp
    rfc/detail/rules.cpp
    service/service.cpp
    service/zlib_service.cpp
    service/virtual_service.cpp
    ;

for local f in $(SOURCES)
{
#    run $(f) : : : ;
    run $(f) : target-name $(f:B)_ ;
}

local FILE_TESTS =
    file_posix.cpp
    file_stdio.cpp
    file_win32.cpp
;

for local f in $(FILE_TESTS)
{
    run $(f) /boost/filesystem//boost_filesystem
    : : : <warnings>off <undefined-sanitizer>norecover:<link>static
    : $(f:B)_ ;
}
